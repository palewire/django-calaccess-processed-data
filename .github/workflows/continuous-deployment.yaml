name: Testing and distribution
on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint-python:
    name: Lint Python code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pipx install pipenv

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pipenv'

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv install --dev --python `which python`

      - id: lint
        name: Lint
        run: pipenv run flake8 ./calaccess_processed

  test-python:
    name: "Test Python code"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pipx install pipenv

      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pipenv'

      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '11'
          postgresql db: calaccess_processed
          postgresql user: test
          postgresql password: test

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv install --dev

      - name: Test
        run: |
          cp example/project/settings_tests.py.template example/project/settings_local.py
          pipenv run python example/manage.py test calaccess_processed
        env:
          IA_STORAGE_ACCESS_KEY: ${{ secrets.IA_STORAGE_ACCESS_KEY }}
          IA_STORAGE_SECRET_KEY: ${{ secrets.IA_STORAGE_SECRET_KEY }}

  test-build:
    name: Build Python package
    runs-on: ubuntu-latest
    needs: [test-python]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install pipenv
        run: pipx install pipenv

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pipenv'

      - id: pipenv-install
        name: Install Python dependencies
        run: pipenv install --dev --python `which python`

      - id: build
        name: Build release
        run: |
          pipenv run python setup.py sdist
          pipenv run python setup.py bdist_wheel
        shell: bash

      - id: check
        name: Check release
        run: pipenv run twine check dist/*
        shell: bash

      - id: save
        name: Save artifact
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: ./dist
          if-no-files-found: error

  tag-release:
    name: Tagged PyPI release
    runs-on: ubuntu-latest
    needs: [test-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - id: fetch
        name: Fetch artifact
        uses: actions/download-artifact@v3
        with:
          name: release
          path: ./dist

      - id: publish
        name: Publish release
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          verify_metadata: false
